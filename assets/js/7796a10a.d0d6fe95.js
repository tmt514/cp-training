"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9742],{3564:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var t=s(5893),i=s(1151);const a={sidebar_position:2,exercises:["kattis-heimavinna","kattis-drunkvigenere","kattis-hidingplaces","leetcode-text-justification"],title:"Basic String Manipulations"},r="frontMatter.title",l={id:"week1/basic-string",title:"Basic String Manipulations",description:"There are three important operations for strings: splitting, appending, and type conversion.",source:"@site/docs/week1/01-basic-string.mdx",sourceDirName:"week1",slug:"/week1/basic-string",permalink:"/cp-training/docs/week1/basic-string",draft:!1,unlisted:!1,editUrl:"https://github.com/tmt514/cp-training/tree/main/docs/week1/01-basic-string.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,exercises:["kattis-heimavinna","kattis-drunkvigenere","kattis-hidingplaces","leetcode-text-justification"],title:"Basic String Manipulations"},sidebar:"tutorialSidebar",previous:{title:"Basic I/O",permalink:"/cp-training/docs/week1/basic-io"},next:{title:"Basic Array Manipulations",permalink:"/cp-training/docs/week1/basic-array"}},c={},d=[{value:"Splitting",id:"splitting",level:2},{value:"Appending",id:"appending",level:2},{value:"Type Conversion",id:"type-conversion",level:2},{value:"Exercises",id:"exercises",level:2}];function o(e){const n={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components},{DisplayProgress:s,LocalButton:r,TabItem:l,Tabs:c}=n;return s||p("DisplayProgress",!0),r||p("LocalButton",!0),l||p("TabItem",!0),c||p("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s,{names:a.exercises}),"\n",(0,t.jsx)(n.h1,{id:"frontmattertitle",children:a.title}),"\n",(0,t.jsxs)(n.p,{children:["There are three important operations for strings: ",(0,t.jsx)(n.strong,{children:"splitting"}),", ",(0,t.jsx)(n.strong,{children:"appending"}),", and ",(0,t.jsx)(n.strong,{children:"type conversion"}),".\nFortunately, for Java and Python we already have libraries that help us accomplish these tasks."]}),"\n",(0,t.jsx)(n.h2,{id:"splitting",children:"Splitting"}),"\n",(0,t.jsxs)(c,{groupId:"programming-language",children:[(0,t.jsx)(l,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'String input = Scanner.nextLine()\nString[] strs = input.trim().split(" ")\n'})})}),(0,t.jsx)(l,{value:"py",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"strs = input().strip().split()\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"appending",children:"Appending"}),"\n",(0,t.jsxs)(c,{groupId:"programming-language",children:[(0,t.jsxs)(l,{value:"java",label:"Java",children:[(0,t.jsxs)(n.p,{children:["Java strings are ",(0,t.jsx)(n.strong,{children:"immutable"}),", which means that whenever you attempt to append a character (or other string) to the existing one, you must allocate a new string. Therefore, the naive way to appending ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsx)(n.mrow,{children:(0,t.jsx)(n.mi,{children:"n"})}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,t.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]})," characters to a string actually takes ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mi,{children:"O"}),(0,t.jsx)(n.mo,{stretchy:"false",children:"("}),(0,t.jsxs)(n.msup,{children:[(0,t.jsx)(n.mi,{children:"n"}),(0,t.jsx)(n.mn,{children:"2"})]}),(0,t.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n^2)"})]})})}),(0,t.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"1.0641em",verticalAlign:"-0.25em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(n.span,{className:"mopen",children:"("}),(0,t.jsxs)(n.span,{className:"mord",children:[(0,t.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(n.span,{className:"msupsub",children:(0,t.jsx)(n.span,{className:"vlist-t",children:(0,t.jsx)(n.span,{className:"vlist-r",children:(0,t.jsx)(n.span,{className:"vlist",style:{height:"0.8141em"},children:(0,t.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(n.span,{className:"mord mtight",children:"2"})})]})})})})})]}),(0,t.jsx)(n.span,{className:"mclose",children:")"})]})})]})," time!\nTo resolve this issue, you can either use ",(0,t.jsx)(n.code,{children:"ArrayList"})," or ",(0,t.jsx)(n.code,{children:"StringBuilder"}),"."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class arraylist {\n  public static void main(String[] args) {\n    ArrayList<String> strings = new ArrayList<String>();\n    strings.add("one");\n    strings.add("two");\n    strings.add("three");\n    strings.add("four");\n    String all = String.join("+", strings);\n    System.out.println(all);\n  }\n}\n'})})]}),(0,t.jsx)(l,{value:"py",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"strs = input().strip().split()\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"type-conversion",children:"Type Conversion"}),"\n",(0,t.jsxs)(c,{groupId:"programming-language",children:[(0,t.jsxs)(l,{value:"java",label:"Java",children:[(0,t.jsxs)(n.p,{children:["We can use ",(0,t.jsx)(n.code,{children:"Integer.parseInt()"})," to obtain an integer from a string."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"String input = Scanner.nextLine();\nint val = Integer.parseInt(input);\n"})})]}),(0,t.jsx)(l,{value:"py",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"val = input()\nint(val)\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"exercises",children:"Exercises"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{}),(0,t.jsx)(n.th,{children:"Problem"}),(0,t.jsx)(n.th,{children:"Notes"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(r,{name:"kattis-heimavinna"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://open.kattis.com/problems/heimavinna",children:"Homework"})}),(0,t.jsx)(n.td,{children:"String Splitting."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(r,{name:"kattis-drunkvigenere"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://open.kattis.com/problems/drunkvigenere",children:"Drunk Vigen\xe8re"})}),(0,t.jsx)(n.td,{children:"Convert between characters and numbers."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(r,{name:"kattis-hidingplaces"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://open.kattis.com/problems/hidingplaces",children:"Hiding Places"})}),(0,t.jsx)(n.td,{children:"Convert between characters and numbers."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(r,{name:"leetcode-text-justification"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/text-justification/",children:"Leetcode 68. Text Justification"})}),(0,t.jsx)(n.td,{children:"Computing lengths and appending spaces."})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>r});var t=s(7294);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);